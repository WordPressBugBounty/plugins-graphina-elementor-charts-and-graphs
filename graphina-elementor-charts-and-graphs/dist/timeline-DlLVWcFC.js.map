{"version":3,"file":"timeline-DlLVWcFC.js","sources":["../assets/elementor/js/apex-chart/TimelineChart.js"],"sourcesContent":["import GraphinaApexChartBase from './GraphinaApexChartBase';\n\n// Child class specifically for Timeline Charts\nexport default class TimelineChart extends GraphinaApexChartBase {\n    constructor() {\n        super();\n        this.observer = {}; // For IntersectionObserver\n    }\n\n    // Setup handlers for timeline chart type\n    setUpChartsHandler() {\n        this.chartHandlers = {\n            timeline: (element) => this.observeChartElement(element, 'timeline'),\n        };\n    }\n\n    dateFormat(timestamp, isTime = false, isDate = false) {\n        let dateSeparator = '-';\n        let date = new Date(timestamp);\n        let hours = date.getHours();\n        let minutes = \"0\" + date.getMinutes();\n        let day = date.getDate();\n        let month = date.getMonth() + 1;\n        let year = date.getFullYear()\n        return (isDate ? (day + dateSeparator + month + dateSeparator + year) : '') + (isDate && isTime ? ' ' : '') + (isTime ? (hours + ':' + minutes.substr(-2)) : '');\n    }\n    \n\n    TimelineChartXaxisFormat(chartOptions,extraData){\n        const showTime = extraData.xaxis_show_time\n        const showDate = extraData.xaxis_show_date\n        chartOptions.xaxis.labels.formatter = (val) => {\n            val = this.dateFormat(val,showTime,showDate);\n            return val;\n        }\n    }\n    applyDataLabelFormatter(chartOptions, extraData) {\n        const showTime = extraData.xaxis_show_time;\n        const showDate = extraData.xaxis_show_date;\n        let datalabelPreFix = extraData.chart_datalabel_prefix ?? '';\n        let datalabelPostFix = extraData.chart_datalabel_postfix ?? '';\n    \n        if (!chartOptions.dataLabels) {\n            chartOptions.dataLabels = {}; // Initialize dataLabels if it doesn't exist\n        }\n    \n        chartOptions.dataLabels.formatter = (val) => {\n            // Check if val is an array (indicating a range)\n            if (Array.isArray(val) && val.length === 2) {\n                let [startTimestamp, endTimestamp] = val;\n        \n                // Calculate the difference in milliseconds\n                let diffMs = endTimestamp - startTimestamp;\n        \n                // Convert milliseconds to time components\n                let diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n                let diffHours = Math.floor((diffMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n                let diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n        \n                // Return formatted duration\n                return `${diffDays} days ${diffHours} hours ${diffMinutes} minutes`;\n            } else {\n                // Check if val is a valid number\n                if (typeof val !== \"number\" || isNaN(val)) {\n                    console.warn(\"Invalid value for data label:\", val);\n                    return datalabelPreFix + \"N/A\" + datalabelPostFix;\n                }\n        \n                // Format single timestamp with both date and time\n                return datalabelPreFix + this.dateFormat(val, true, true) + datalabelPostFix;\n            }\n        };\n        \n    }\n    \n    \n    getChartOptions(finalChartOptions, chartType,extraData,responsive_options) {\n        if (chartType === 'timeline') {\n            finalChartOptions.xaxis.type = 'datetime'\n            finalChartOptions.plotOptions = {\n                bar: {\n                    horizontal: true\n                }\n            }\n            finalChartOptions.responsive = responsive_options\n        }\n        this.TimelineChartXaxisFormat(finalChartOptions,extraData);\n        return finalChartOptions;\n    }\n}\n\n// Initialize TimelineChart\nnew TimelineChart();\n"],"names":["TimelineChart","GraphinaApexChartBase","element","timestamp","isTime","isDate","dateSeparator","date","hours","minutes","day","month","year","chartOptions","extraData","showTime","showDate","val","datalabelPreFix","datalabelPostFix","startTimestamp","endTimestamp","diffMs","diffDays","diffHours","diffMinutes","finalChartOptions","chartType","responsive_options"],"mappings":"wDAGe,MAAMA,UAAsBC,CAAsB,CAC7D,aAAc,CACV,MAAO,EACP,KAAK,SAAW,EACxB,CAGI,oBAAqB,CACjB,KAAK,cAAgB,CACjB,SAAWC,GAAY,KAAK,oBAAoBA,EAAS,UAAU,CACtE,CACT,CAEI,WAAWC,EAAWC,EAAS,GAAOC,EAAS,GAAO,CAClD,IAAIC,EAAgB,IAChBC,EAAO,IAAI,KAAKJ,CAAS,EACzBK,EAAQD,EAAK,SAAU,EACvBE,EAAU,IAAMF,EAAK,WAAY,EACjCG,EAAMH,EAAK,QAAS,EACpBI,EAAQJ,EAAK,SAAQ,EAAK,EAC1BK,EAAOL,EAAK,YAAW,EAC3B,OAAQF,EAAUK,EAAMJ,EAAgBK,EAAQL,EAAgBM,EAAQ,KAAOP,GAAUD,EAAS,IAAM,KAAOA,EAAUI,EAAQ,IAAMC,EAAQ,OAAO,EAAE,EAAK,GACrK,CAGI,yBAAyBI,EAAaC,EAAU,CAC5C,MAAMC,EAAWD,EAAU,gBACrBE,EAAWF,EAAU,gBAC3BD,EAAa,MAAM,OAAO,UAAaI,IACnCA,EAAM,KAAK,WAAWA,EAAIF,EAASC,CAAQ,EACpCC,EAEnB,CACI,wBAAwBJ,EAAcC,EAAW,CAC5BA,EAAU,gBACVA,EAAU,gBAC3B,IAAII,EAAkBJ,EAAU,wBAA0B,GACtDK,EAAmBL,EAAU,yBAA2B,GAEvDD,EAAa,aACdA,EAAa,WAAa,IAG9BA,EAAa,WAAW,UAAaI,GAAQ,CAEzC,GAAI,MAAM,QAAQA,CAAG,GAAKA,EAAI,SAAW,EAAG,CACxC,GAAI,CAACG,EAAgBC,CAAY,EAAIJ,EAGjCK,EAASD,EAAeD,EAGxBG,EAAW,KAAK,MAAMD,GAAU,IAAO,GAAK,GAAK,GAAG,EACpDE,EAAY,KAAK,MAAOF,GAAU,IAAO,GAAK,GAAK,KAAQ,IAAO,GAAK,GAAG,EAC1EG,EAAc,KAAK,MAAOH,GAAU,IAAO,GAAK,KAAQ,IAAO,GAAG,EAGtE,MAAO,GAAGC,CAAQ,SAASC,CAAS,UAAUC,CAAW,UACzE,KAEgB,QAAI,OAAOR,GAAQ,UAAY,MAAMA,CAAG,GACpC,QAAQ,KAAK,gCAAiCA,CAAG,EAC1CC,EAAkB,MAAQC,GAI9BD,EAAkB,KAAK,WAAWD,EAAK,GAAM,EAAI,EAAIE,CAEnE,CAET,CAGI,gBAAgBO,EAAmBC,EAAUb,EAAUc,EAAoB,CACvE,OAAID,IAAc,aACdD,EAAkB,MAAM,KAAO,WAC/BA,EAAkB,YAAc,CAC5B,IAAK,CACD,WAAY,EAChC,CACA,EACYA,EAAkB,WAAaE,GAEnC,KAAK,yBAAyBF,EAAkBZ,CAAS,EAClDY,CACf,CACA,CAGA,IAAI1B"}