{"version":3,"file":"geo_google.js","sources":["../assets/elementor/js/google-chart/GeoGoogleChart.js"],"sourcesContent":["import GraphinaGoogleChartBase from './GraphinaGoogleChartBase';\n\n// Child class specifically for Geo Charts\nexport default class GeoChart extends GraphinaGoogleChartBase {\n    constructor(settings) {\n        super(settings);\n        this.chart = null;\n        this.data = null;\n        this.options = {};\n        this.initFilter()\n        this.region = {}\n    }\n\n    initFilter(){\n        jQuery(document.body).off('click','.graphina-geo-filter-div-button')\n        jQuery(document.body).on('click', '.graphina-geo-filter-div-button', this.debounce(this.handleGeoChartFilter.bind(this),300));\n    }\n\n    handleGeoChartFilter(event){\n        const currentElement    = event.currentTarget\n        const elementId         = jQuery(currentElement).data('element_id');\n        const chartElement      = jQuery(`.graphina-google-chart[data-element_id=\"${elementId}\"]`);\n        let chartType = jQuery(`#graphina-geo-drop_down_filter_${elementId}`).val()\n        this.setupChart(chartElement, 'GeoChart');\n        this.region[elementId] = chartType\n    }\n\n    /**\n     * Sets up the chart handlers for Google Geo Chart.\n     */\n    setUpChartsHandler() {\n        this.chartHandlers = {\n            geo_google: (element) => this.observeChartElement(element, 'GeoChart'),\n        };\n\n    }\n\n    /**\n     * Observes the chart element and initializes it when in viewport.\n     * @param {jQuery} element - The jQuery element reference.\n     * @param {string} chartType - The type of chart to initialize.\n     */\n    observeChartElement(element, chartType) {\n        if (gcfe_public_localize.view_port === 'off') {\n            if (!this.observer) {\n                this.observer = new IntersectionObserver((entries) => {\n                    entries.forEach((entry) => {\n                        if (entry.isIntersecting) {\n                            // Initialize chart when in viewport\n                            this.setupChart(jQuery(entry.target), chartType);\n                            this.observer.unobserve(entry.target);\n                        }\n                    });\n                }, { threshold: 0.1 });\n            }\n            this.observer.observe(element[0]);\n        } else {\n            this.setupChart(element, chartType);\n        }\n    }\n\n\n    // Customize chart options for Gantt Charts (if needed)\n    getFinalChartOptions(chartOptions,elementId){\n        // Customize options here if needed\n\n        if(this.region && this.region[elementId]){\n            chartOptions.region     = this.region[elementId]\n            chartOptions.resolution = gcfe_public_localize.provinceSupportedCountries.includes(this.region[elementId]) ? 'provinces' : 'countries';\n        }\n        return chartOptions;\n\n    }\n\n    setupTableData(dynamicData, dataTable, googleChart, googleChartTexture, extraData) {\n        if(dynamicData?.google_chart_data?.data.length > 0){\n            dataTable.addColumn('string', 'State');\n            if(extraData.geo_label){\n                dataTable.addColumn('number', extraData.geo_label);\n            }else{\n                dataTable.addColumn('number', 'Sale');\n            }\n            dynamicData.google_chart_data.data.forEach(row => dataTable.addRow(row));\n            googleChart.show()\n            googleChartTexture.hide()\n        } else if(dynamicData?.columns.length > 0 && dynamicData.rows.length > 0){\n            dynamicData.columns.forEach((col, index) => {\n                dataTable.addColumn(col[0],col[1])\n            });\n            dynamicData.rows.forEach(row => dataTable.addRow(row));\n        } else{\n            googleChart.hide()\n            googleChartTexture.show()\n        }\n    }\n    \n    afterSetupChart(element, extraData,chart,dataTable,finalChartOptions) {\n        // Define color mappings\n        const circleColors = {\n            \"#4684ee\": extraData.ballColor ?? \"#4684ee\",\n            \"#f7f7f7\": extraData.innerCircleColor ?? \"#f7f7f7\",\n            \"#cccccc\": extraData.outerCircleColor ?? \"#cccccc\"\n        };\n    \n        const needleColor = extraData.needleColor ?? \"#c63310\";\n    \n        // Update circle colors\n        element.querySelectorAll(\"circle\").forEach(circle => {\n            const fillColor = circleColors[circle.getAttribute(\"fill\")];\n            if (fillColor) circle.setAttribute(\"fill\", fillColor);\n        });\n    \n        // Update path colors\n        element.querySelectorAll(\"path\").forEach(path => {\n            if (path.getAttribute(\"stroke\") === \"#c63310\") {\n                path.setAttribute(\"stroke\", needleColor);\n                path.setAttribute(\"fill\", needleColor);\n            }\n        });\n        \n        window.addEventListener('resize', () => {\n            if (chart && dataTable && finalChartOptions) {\n                chart.draw(dataTable, finalChartOptions);\n            }\n        });\n    }\n    \n\n\n}\n\n// Initialize Geo Chart\nwindow.graphinaGoogleGeoChart = new GeoChart();\n"],"names":["GeoChart","GraphinaGoogleChartBase","settings","event","currentElement","elementId","chartElement","chartType","element","entries","entry","chartOptions","dynamicData","dataTable","googleChart","googleChartTexture","extraData","_a","row","col","index","chart","finalChartOptions","circleColors","needleColor","circle","fillColor","path"],"mappings":"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"}