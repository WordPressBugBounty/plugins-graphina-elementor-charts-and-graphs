{"version":3,"file":"GraphinaGoogleChartBase-BJhuS1mN.js","sources":["../assets/elementor/js/google-chart/GraphinaGoogleChartBase.js"],"sourcesContent":["// Base class to manage shared functionalities for Google Charts\nexport default class GraphinaGoogleChartBase {\n    constructor() {\n        this.chartHandlers = {};\n        this.isGoogleChartsLoaded = false;\n        this.init();\n    }\n\n    // Initialize the class\n    init() {\n        this.setUpChartsHandler();\n        this.bindEventHandlers();\n    }\n\n    // Bind event listeners (e.g., Elementor events)\n    bindEventHandlers() {\n        jQuery(document.body).off('change', '.graphina-select-google-chart-type').on('change', '.graphina-select-google-chart-type', this.debounce(this.handleChartTypeChange.bind(this), 300));\n        jQuery(window).on('elementor/frontend/init', this.handleElementorWidgetInit.bind(this));\n        jQuery(window).on('elementor/editor/init', this.handleElementorWidgetInit.bind(this));\n        jQuery(document.body).off('click','.graphina-filter-div-button.google')\n        jQuery(document.body).on('click', '.graphina-filter-div-button.google', this.handleChartFilter.bind(this));\n    }\n\n    debounce(func, wait) {\n        let timeout;\n        return function (...args) {\n            const context = this;\n            clearTimeout(timeout);\n            timeout = setTimeout(() => func.apply(context, args), wait);\n        };\n    }\n\n\n    // Change Chart Type Handler\n    handleChartTypeChange(event) {\n        const dropdown = jQuery(event.target);\n        const newChartType = dropdown.val();\n        const elementId = dropdown.data('element_id');\n        const chartElement = jQuery(`.graphina-google-chart[data-element_id=\"${elementId}\"]`);\n\n        if (chartElement.length > 0) {\n            this.updateChartType(chartElement, newChartType);\n        }\n    }\n\n    updateChartType(chartElement, newChartType) {\n        this.setupChart(chartElement, newChartType)\n    }\n\n    handleChartFilter(event) {\n        const currentElement = event.currentTarget\n        const elementId = jQuery(currentElement).data('element_id');\n        const chartElement = jQuery(`.graphina-google-chart[data-element_id=\"${elementId}\"]`);\n        let chartType = jQuery(chartElement).data('chart_type');\n        chartType = chartType === 'area_google' ? 'AreaChart' : 'AreaChart'\n        if(chartElement.length > 0){\n            this.setupChart(chartElement, chartType)\n        }\n    }\n\n    // Setup handlers for various chart types (to be implemented by child classes)\n    setUpChartsHandler() {\n        throw new Error('setUpChartsHandler method must be implemented by subclasses');\n    }\n\n    // Handle Elementor widget initialization\n    handleElementorWidgetInit() {\n\n        elementorFrontend.hooks.addAction('frontend/element_ready/widget', ($scope) => {\n            const chartElement = $scope.find('.graphina-google-chart');\n            if (chartElement.length > 0) {\n                this.initializeCharts(chartElement);\n            }\n        });\n    }\n\n    setupTableData() {\n        throw new Error('setupTableData method must be implemented by subclasses');\n    }\n\n    // Initialize charts for a given element\n    initializeCharts(chartElement) {\n\n        const chartType = chartElement.data('chart_type');\n\n        if (this.chartHandlers[chartType]) {\n            this.chartHandlers[chartType](chartElement);\n        }\n    }\n\n    setFieldsForCSV(settings, response, chartType, extraData) {\n        // Determine the type of data source and select appropriate fields\n        const isSQLBuilder = settings[`${extraData.graphina_prefix}${chartType}_chart_dynamic_data_option`] === 'sql-builder';\n        const xFieldSelector = `[data-setting=\"${extraData.graphina_prefix}${chartType}_${isSQLBuilder ? 'chart_sql_builder_x_columns' : 'chart_csv_x_columns'}\"]`;\n        const yFieldSelector = `[data-setting=\"${extraData.graphina_prefix}${chartType}_${isSQLBuilder ? 'chart_sql_builder_y_columns' : 'chart_csv_y_columns'}\"]`;\n\n        const elementX = parent.document.querySelector(xFieldSelector);\n        const elementY = parent.document.querySelector(yFieldSelector);\n        // Exit if either element is not found\n        if (!elementX || !elementY) return;\n\n        // Clear existing options in the dropdowns\n        elementX.innerHTML = '';\n        elementY.innerHTML = '';\n\n        // Determine the data source for options and extra data keys\n        const options = isSQLBuilder ? response.extra.db_column : response.extra.column;\n        const xExtraKey = isSQLBuilder ? extraData.chart_csv_x_columns_sql : extraData.chart_csv_x_columns;\n        const yExtraKey = isSQLBuilder ? extraData.chart_csv_y_columns_sql : extraData.chart_csv_y_columns;\n\n        // Populate the dropdown fields with options\n        options.forEach((option) => {\n            // Check for duplicates before adding options to dropdowns\n            const optionExistsInX = Array.from(elementX.options).some(opt => opt.value === option);\n            const optionExistsInY = Array.from(elementY.options).some(opt => opt.value === option);\n\n            if (!optionExistsInX) {\n                const isSelectedX = Array.isArray(xExtraKey) ? xExtraKey.includes(option) : xExtraKey === option;\n                elementX.append(new Option(option, option, isSelectedX, isSelectedX));\n            }\n\n            if (!optionExistsInY) {\n                const isSelectedY = Array.isArray(yExtraKey) ? yExtraKey.includes(option) : yExtraKey === option;\n                elementY.append(new Option(option, option, isSelectedY, isSelectedY));\n            }\n        });\n    }\n\n\n\n    getDynamicData(settings, extraData, chartType, elementId, filterValue) {\n        return new Promise((resolve, reject) => {\n            jQuery.ajax({\n                url: gcfe_public_localize.ajaxurl,\n                type: 'POST',\n                dataType: 'json',\n                data: {\n                    action: 'graphina_get_dynamic_data',\n                    nonce: gcfe_public_localize.nonce,\n                    chartType: chartType,\n                    post_id: extraData.current_post_id,\n                    element_id: elementId,\n                    series_count: extraData.chart_data_series_count_dynamic,\n                    settings: settings,\n                    selected_field: filterValue\n                },\n                success: (response) => {\n                    if (response.status) {\n                        if ((extraData.chart_csv_column_wise_enable || extraData.chart_dynamic_data_option === 'sql-builder') && (extraData.chart_dynamic_data_option === 'csv' || extraData.chart_dynamic_data_option === 'remote-csv' || extraData.chart_dynamic_data_option === 'google-sheet' || extraData.chart_dynamic_data_option === 'sql-builder')) {\n                            if (jQuery('body').hasClass(\"elementor-editor-active\")) {\n                                this.setFieldsForCSV(settings, response, chartType, extraData);\n                            };\n                        }\n                        resolve(response);\n                    } else {\n                        console.error('Error:', response.message);\n                        reject(new Error(response.message || 'Failed to fetch dynamic data.'));\n                    }\n                },\n                error: (error) => {\n                    console.error('AJAX Error:', error);\n                    reject(new Error('AJAX request failed.'));\n                },\n            });\n        });\n    }\n\n\n    getFinalChartOptions(finalChartOptions) {\n        return finalChartOptions;\n    }\n\n    getFinalChartData(dataTable) {\n        return dataTable\n    }\n\n    prepareGanttRowData(x) {\n        return x.map(function (k, j) {\n            if (j === 3 || j === 4) {\n                if (/^\\d{2}-\\d{2}-\\d{4}$/.test(k)) {\n                    let [day, month, year] = k.split(\"-\");\n                    k = new Date(`${year}-${month}-${day}`); // Convert to \"YYYY-MM-DD\"\n                } else if (/^\\d{4}-\\d{2}-\\d{2}$/.test(k)) {\n                    k = new Date(k); // Already in correct format\n                } else {\n                    k = null; // Invalid date\n                }\n            }\n            if (j === 5) {\n                k = null;\n            }\n            if (j === 7 && (k === 'null' || k === '0')) {\n                k = null;\n            } else if (j === 7 && k !== 'null') {\n                k = k.toString()\n            }\n            if (j === 0) {\n                k = k.toString()\n            }\n            if (j === 6) {\n                k = parseInt(k)\n            }\n            return k;\n        });\n    }\n\n    afterSetupChart(element,extraData){\n        return true\n    }\n\n    // Setup and render Google Chart\n    async setupChart(element, chartType) {\n\n        const chartBox = element.closest('.chart-box');\n        const googleChartTexture = chartBox ? chartBox.find('.google-chart-texture') : null;\n        const googleChart = chartBox ? chartBox.find('.graphina-google-chart') : null;\n\n        try {\n            const elementId     = element.data('element_id'); // Chart Element ID\n            const chart_type    = element.data('chart_type'); // Chart Type\n            const chartData     = element.data('chart_data'); // Chart data from element attributes\n            const extraData     = element.data('extra_data'); // Chart data from element attributes\n            const settings      = element.data('settings');   // Chart settings\n            const chartOptions  = element.data('chart_options') || {}; // Chart options\n\n            // Ensure that Google Charts is loaded and only once\n            await this.loadGoogleCharts();\n\n            // Validate chartType\n            if (!google.visualization[chartType]) {\n                throw new Error(`Invalid chart type: ${chartType}`);\n            }\n            // Create a new DataTable\n            const dataTable = new google.visualization.DataTable();\n            if (extraData.chart_data_option) {\n                try {\n                    let filterValue = []\n                    const totalFilter = jQuery(`#graphina_chart_filter_${elementId}`).data('total_filter');\n                    for (let index = 0; index < totalFilter; index++) {\n                        filterValue[index] = jQuery(`#graphina-start-date_${index}${elementId}`).val() ?? jQuery(`#graphina-drop_down_filter_${index}${elementId}`).val()\n                    }\n                    const dynamicData = await this.getDynamicData(settings, extraData, chart_type, elementId,filterValue);\n                    this.setupTableData(dynamicData,dataTable,googleChart,googleChartTexture,extraData);\n                \n                } catch (error) {\n                    googleChart.hide()\n                    googleChartTexture.show()\n                    console.error('Failed to get dynamic data:', error);\n                }\n                jQuery(document).find(`.graphina-${elementId}-loader`).hide()\n            } else {\n\n                const finalChartData = this.getFinalChartData(chartData);\n                this.setupTableData(finalChartData, dataTable, googleChart, googleChartTexture, extraData);\n            }\n\n            if ( 'Gantt' === chartType ) {\n                this.setDependField(settings, extraData)\n            }\n\n            // Render the chart\n            const chart = new google.visualization[chartType](element[0]);\n            const finalChartOptions = this.getFinalChartOptions(chartOptions)\n\n            chart.draw(dataTable, finalChartOptions);\n            this.afterSetupChart(element[0],extraData);\n        } catch (error) {\n            googleChart.hide()\n            googleChartTexture.show()\n            console.error(`Error initializing ${chartType} chart:`, error);\n        }\n    }\n\n\n    // Dynamically load the Google Charts library\n    async loadGoogleCharts() {\n\n        if (this.isGoogleChartsLoaded) return; // Prevent loading multiple times\n\n        return new Promise((resolve, reject) => {\n            try {\n                google.charts.load('current', { packages: ['corechart','geochart','gauge','gantt','orgchart'] });\n                google.charts.setOnLoadCallback(() => {\n                    this.isGoogleChartsLoaded = true;\n                    resolve();\n                });\n            } catch (error) {\n                console.error('Error loading Google Charts:', error);\n                reject(error);\n            }\n        });\n    }\n}\n"],"names":["GraphinaGoogleChartBase","func","wait","timeout","args","context","event","dropdown","newChartType","elementId","chartElement","currentElement","chartType","$scope","settings","response","extraData","isSQLBuilder","xFieldSelector","yFieldSelector","elementX","elementY","options","xExtraKey","yExtraKey","option","optionExistsInX","opt","optionExistsInY","isSelectedX","isSelectedY","filterValue","resolve","reject","error","finalChartOptions","dataTable","x","k","j","day","month","year","element","chartBox","googleChartTexture","googleChart","chart_type","chartData","chartOptions","totalFilter","index","dynamicData","finalChartData","chart"],"mappings":"AACe,MAAMA,CAAwB,CACzC,aAAc,CACV,KAAK,cAAgB,CAAE,EACvB,KAAK,qBAAuB,GAC5B,KAAK,KAAM,CACnB,CAGI,MAAO,CACH,KAAK,mBAAoB,EACzB,KAAK,kBAAmB,CAChC,CAGI,mBAAoB,CAChB,OAAO,SAAS,IAAI,EAAE,IAAI,SAAU,oCAAoC,EAAE,GAAG,SAAU,qCAAsC,KAAK,SAAS,KAAK,sBAAsB,KAAK,IAAI,EAAG,GAAG,CAAC,EACtL,OAAO,MAAM,EAAE,GAAG,0BAA2B,KAAK,0BAA0B,KAAK,IAAI,CAAC,EACtF,OAAO,MAAM,EAAE,GAAG,wBAAyB,KAAK,0BAA0B,KAAK,IAAI,CAAC,EACpF,OAAO,SAAS,IAAI,EAAE,IAAI,QAAQ,oCAAoC,EACtE,OAAO,SAAS,IAAI,EAAE,GAAG,QAAS,qCAAsC,KAAK,kBAAkB,KAAK,IAAI,CAAC,CACjH,CAEI,SAASC,EAAMC,EAAM,CACjB,IAAIC,EACJ,OAAO,YAAaC,EAAM,CACtB,MAAMC,EAAU,KAChB,aAAaF,CAAO,EACpBA,EAAU,WAAW,IAAMF,EAAK,MAAMI,EAASD,CAAI,EAAGF,CAAI,CAC7D,CACT,CAII,sBAAsBI,EAAO,CACzB,MAAMC,EAAW,OAAOD,EAAM,MAAM,EAC9BE,EAAeD,EAAS,IAAK,EAC7BE,EAAYF,EAAS,KAAK,YAAY,EACtCG,EAAe,OAAO,2CAA2CD,CAAS,IAAI,EAEhFC,EAAa,OAAS,GACtB,KAAK,gBAAgBA,EAAcF,CAAY,CAE3D,CAEI,gBAAgBE,EAAcF,EAAc,CACxC,KAAK,WAAWE,EAAcF,CAAY,CAClD,CAEI,kBAAkBF,EAAO,CACrB,MAAMK,EAAiBL,EAAM,cACvBG,EAAY,OAAOE,CAAc,EAAE,KAAK,YAAY,EACpDD,EAAe,OAAO,2CAA2CD,CAAS,IAAI,EACpF,IAAIG,EAAY,OAAOF,CAAY,EAAE,KAAK,YAAY,EACtDE,EAA0C,YACvCF,EAAa,OAAS,GACrB,KAAK,WAAWA,EAAcE,CAAS,CAEnD,CAGI,oBAAqB,CACjB,MAAM,IAAI,MAAM,6DAA6D,CACrF,CAGI,2BAA4B,CAExB,kBAAkB,MAAM,UAAU,gCAAkCC,GAAW,CAC3E,MAAMH,EAAeG,EAAO,KAAK,wBAAwB,EACrDH,EAAa,OAAS,GACtB,KAAK,iBAAiBA,CAAY,CAElD,CAAS,CACT,CAEI,gBAAiB,CACb,MAAM,IAAI,MAAM,yDAAyD,CACjF,CAGI,iBAAiBA,EAAc,CAE3B,MAAME,EAAYF,EAAa,KAAK,YAAY,EAE5C,KAAK,cAAcE,CAAS,GAC5B,KAAK,cAAcA,CAAS,EAAEF,CAAY,CAEtD,CAEI,gBAAgBI,EAAUC,EAAUH,EAAWI,EAAW,CAEtD,MAAMC,EAAeH,EAAS,GAAGE,EAAU,eAAe,GAAGJ,CAAS,4BAA4B,IAAM,cAClGM,EAAiB,kBAAkBF,EAAU,eAAe,GAAGJ,CAAS,IAAIK,EAAe,8BAAgC,qBAAqB,KAChJE,EAAiB,kBAAkBH,EAAU,eAAe,GAAGJ,CAAS,IAAIK,EAAe,8BAAgC,qBAAqB,KAEhJG,EAAW,OAAO,SAAS,cAAcF,CAAc,EACvDG,EAAW,OAAO,SAAS,cAAcF,CAAc,EAE7D,GAAI,CAACC,GAAY,CAACC,EAAU,OAG5BD,EAAS,UAAY,GACrBC,EAAS,UAAY,GAGrB,MAAMC,EAAUL,EAAeF,EAAS,MAAM,UAAYA,EAAS,MAAM,OACnEQ,EAAYN,EAAeD,EAAU,wBAA0BA,EAAU,oBACzEQ,EAAYP,EAAeD,EAAU,wBAA0BA,EAAU,oBAG/EM,EAAQ,QAASG,GAAW,CAExB,MAAMC,EAAkB,MAAM,KAAKN,EAAS,OAAO,EAAE,KAAKO,GAAOA,EAAI,QAAUF,CAAM,EAC/EG,EAAkB,MAAM,KAAKP,EAAS,OAAO,EAAE,KAAKM,GAAOA,EAAI,QAAUF,CAAM,EAErF,GAAI,CAACC,EAAiB,CAClB,MAAMG,EAAc,MAAM,QAAQN,CAAS,EAAIA,EAAU,SAASE,CAAM,EAAIF,IAAcE,EAC1FL,EAAS,OAAO,IAAI,OAAOK,EAAQA,EAAQI,EAAaA,CAAW,CAAC,CACpF,CAEY,GAAI,CAACD,EAAiB,CAClB,MAAME,EAAc,MAAM,QAAQN,CAAS,EAAIA,EAAU,SAASC,CAAM,EAAID,IAAcC,EAC1FJ,EAAS,OAAO,IAAI,OAAOI,EAAQA,EAAQK,EAAaA,CAAW,CAAC,CACpF,CACA,CAAS,CACT,CAII,eAAehB,EAAUE,EAAWJ,EAAWH,EAAWsB,EAAa,CACnE,OAAO,IAAI,QAAQ,CAACC,EAASC,IAAW,CACpC,OAAO,KAAK,CACR,IAAK,qBAAqB,QAC1B,KAAM,OACN,SAAU,OACV,KAAM,CACF,OAAQ,4BACR,MAAO,qBAAqB,MAC5B,UAAWrB,EACX,QAASI,EAAU,gBACnB,WAAYP,EACZ,aAAcO,EAAU,gCACxB,SAAUF,EACV,eAAgBiB,CACnB,EACD,QAAUhB,GAAa,CACfA,EAAS,SACJC,EAAU,8BAAgCA,EAAU,4BAA8B,iBAAmBA,EAAU,4BAA8B,OAASA,EAAU,4BAA8B,cAAgBA,EAAU,4BAA8B,gBAAkBA,EAAU,4BAA8B,gBAC7S,OAAO,MAAM,EAAE,SAAS,yBAAyB,GACjD,KAAK,gBAAgBF,EAAUC,EAAUH,EAAWI,CAAS,EAGrEgB,EAAQjB,CAAQ,IAEhB,QAAQ,MAAM,SAAUA,EAAS,OAAO,EACxCkB,EAAO,IAAI,MAAMlB,EAAS,SAAW,+BAA+B,CAAC,EAE5E,EACD,MAAQmB,GAAU,CACd,QAAQ,MAAM,cAAeA,CAAK,EAClCD,EAAO,IAAI,MAAM,sBAAsB,CAAC,CAC3C,CACjB,CAAa,CACb,CAAS,CACT,CAGI,qBAAqBE,EAAmB,CACpC,OAAOA,CACf,CAEI,kBAAkBC,EAAW,CACzB,OAAOA,CACf,CAEI,oBAAoBC,EAAG,CACnB,OAAOA,EAAE,IAAI,SAAUC,EAAGC,EAAG,CACzB,GAAIA,IAAM,GAAKA,IAAM,EACjB,GAAI,sBAAsB,KAAKD,CAAC,EAAG,CAC/B,GAAI,CAACE,EAAKC,EAAOC,CAAI,EAAIJ,EAAE,MAAM,GAAG,EACpCA,EAAI,IAAI,KAAK,GAAGI,CAAI,IAAID,CAAK,IAAID,CAAG,EAAE,CACzC,KAAU,sBAAsB,KAAKF,CAAC,EACnCA,EAAI,IAAI,KAAKA,CAAC,EAEdA,EAAI,KAGZ,OAAIC,IAAM,IACND,EAAI,MAEJC,IAAM,IAAMD,IAAM,QAAUA,IAAM,KAClCA,EAAI,KACGC,IAAM,GAAKD,IAAM,SACxBA,EAAIA,EAAE,SAAQ,GAEdC,IAAM,IACND,EAAIA,EAAE,SAAQ,GAEdC,IAAM,IACND,EAAI,SAASA,CAAC,GAEXA,CACnB,CAAS,CACT,CAEI,gBAAgBK,EAAQ3B,EAAU,CAC9B,MAAO,EACf,CAGI,MAAM,WAAW2B,EAAS/B,EAAW,CAEjC,MAAMgC,EAAWD,EAAQ,QAAQ,YAAY,EACvCE,EAAqBD,EAAWA,EAAS,KAAK,uBAAuB,EAAI,KACzEE,EAAcF,EAAWA,EAAS,KAAK,wBAAwB,EAAI,KAEzE,GAAI,CACA,MAAMnC,EAAgBkC,EAAQ,KAAK,YAAY,EACzCI,EAAgBJ,EAAQ,KAAK,YAAY,EACzCK,EAAgBL,EAAQ,KAAK,YAAY,EACzC3B,EAAgB2B,EAAQ,KAAK,YAAY,EACzC7B,EAAgB6B,EAAQ,KAAK,UAAU,EACvCM,EAAgBN,EAAQ,KAAK,eAAe,GAAK,CAAA,EAMvD,GAHA,MAAM,KAAK,iBAAkB,EAGzB,CAAC,OAAO,cAAc/B,CAAS,EAC/B,MAAM,IAAI,MAAM,uBAAuBA,CAAS,EAAE,EAGtD,MAAMwB,EAAY,IAAI,OAAO,cAAc,UAC3C,GAAIpB,EAAU,kBAAmB,CAC7B,GAAI,CACA,IAAIe,EAAc,CAAA,EAClB,MAAMmB,EAAc,OAAO,0BAA0BzC,CAAS,EAAE,EAAE,KAAK,cAAc,EACrF,QAAS0C,EAAQ,EAAGA,EAAQD,EAAaC,IACrCpB,EAAYoB,CAAK,EAAI,OAAO,wBAAwBA,CAAK,GAAG1C,CAAS,EAAE,EAAE,IAAK,GAAI,OAAO,8BAA8B0C,CAAK,GAAG1C,CAAS,EAAE,EAAE,IAAG,EAEnJ,MAAM2C,EAAc,MAAM,KAAK,eAAetC,EAAUE,EAAW+B,EAAYtC,EAAUsB,CAAW,EACpG,KAAK,eAAeqB,EAAYhB,EAAUU,EAAYD,EAAmB7B,CAAS,CAErF,OAAQkB,EAAO,CACZY,EAAY,KAAI,EAChBD,EAAmB,KAAI,EACvB,QAAQ,MAAM,8BAA+BX,CAAK,CACtE,CACgB,OAAO,QAAQ,EAAE,KAAK,aAAazB,CAAS,SAAS,EAAE,KAAI,CAC3E,KAAmB,CAEH,MAAM4C,EAAiB,KAAK,kBAAkBL,CAAS,EACvD,KAAK,eAAeK,EAAgBjB,EAAWU,EAAaD,EAAoB7B,CAAS,CACzG,CAE6BJ,IAAZ,SACD,KAAK,eAAeE,EAAUE,CAAS,EAI3C,MAAMsC,EAAQ,IAAI,OAAO,cAAc1C,CAAS,EAAE+B,EAAQ,CAAC,CAAC,EACtDR,EAAoB,KAAK,qBAAqBc,CAAY,EAEhEK,EAAM,KAAKlB,EAAWD,CAAiB,EACvC,KAAK,gBAAgBQ,EAAQ,CAAC,EAAE3B,CAAS,CAC5C,OAAQkB,EAAO,CACZY,EAAY,KAAI,EAChBD,EAAmB,KAAI,EACvB,QAAQ,MAAM,sBAAsBjC,CAAS,UAAWsB,CAAK,CACzE,CACA,CAII,MAAM,kBAAmB,CAErB,GAAI,MAAK,qBAET,OAAO,IAAI,QAAQ,CAACF,EAASC,IAAW,CACpC,GAAI,CACA,OAAO,OAAO,KAAK,UAAW,CAAE,SAAU,CAAC,YAAY,WAAW,QAAQ,QAAQ,UAAU,CAAC,CAAE,EAC/F,OAAO,OAAO,kBAAkB,IAAM,CAClC,KAAK,qBAAuB,GAC5BD,EAAS,CAC7B,CAAiB,CACJ,OAAQE,EAAO,CACZ,QAAQ,MAAM,+BAAgCA,CAAK,EACnDD,EAAOC,CAAK,CAC5B,CACA,CAAS,CACT,CACA"}