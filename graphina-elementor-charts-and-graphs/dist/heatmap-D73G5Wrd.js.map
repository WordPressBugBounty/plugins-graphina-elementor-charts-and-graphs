{"version":3,"file":"heatmap-D73G5Wrd.js","sources":["../assets/elementor/js/apex-chart/HeatmapChart.js"],"sourcesContent":["import GraphinaApexChartBase from './GraphinaApexChartBase';\n\n// Child class specifically for Heatmap Charts\nexport default class HeatmapChart extends GraphinaApexChartBase {\n    constructor() {\n        super();\n        this.observer = {}; // For IntersectionObserver\n    }\n    \n\n    // Setup handlers for heatmap chart type\n    setUpChartsHandler() {\n        this.chartHandlers = {\n            heatmap: (element) => this.observeChartElement(element, 'heatmap'),\n        };\n    }\n\n    applyYAxisFormatter(chartOptions, extraData) {\n        const prefix = extraData.yaxis_label_prefix ?? '';\n        const postfix = extraData.yaxis_label_postfix ?? '';\n        const series = chartOptions.series ?? [];\n\n        chartOptions.yaxis = {\n            labels: {\n                formatter: function (val) {\n                    const index = parseInt(val, 10);\n                    const seriesName = series[index]?.name ?? val;\n                    return prefix + seriesName + postfix;\n                }\n            }\n        };\n    }\n\n    applyDataLabelFormatter(chartOptions, extraData) {\n\n        let datalabelPreFix = extraData.chart_datalabel_prefix ?? '';\n        let datalabelPostFix = extraData.chart_datalabel_postfix ?? '';\n        if (!chartOptions.dataLabels) {\n            chartOptions.dataLabels = {};\n        }\n        chartOptions.dataLabels.formatter = (val) => {\n            if (extraData.string_format) {\n                val = this.formatNumber(val, extraData.chart_label_pointer_number_for_label);\n            }\n            return datalabelPreFix + val + datalabelPostFix\n        }\n    }\n\n    // Apply Y-axis label formatting\n    applyYAxisFormatter(chartOptions, extraData, axisIndex = false) {\n        const formatAxisLabels = (val, prefix, postfix, decimal, axisIndex) => {\n            if (extraData.chart_yaxis_label_pointer) {\n                return prefix + this.formatNumber(val, decimal) + postfix;\n            } else if (extraData.yaxis_label_format && (axisIndex === 0 || axisIndex === false)) {\n                return prefix + new Intl.NumberFormat(window.gcfe_public_localize.locale_with_hyphen, {\n                    minimumFractionDigits: decimal,\n                    maximumFractionDigits: decimal,\n                }).format(val) + postfix;\n            } else if (extraData.chart_opposite_yaxis_format_number && axisIndex === 1) {\n                return prefix + new Intl.NumberFormat(window.gcfe_public_localize.locale_with_hyphen, {\n                    minimumFractionDigits: decimal,\n                    maximumFractionDigits: decimal,\n                }).format(val) + postfix;\n            }\n            return prefix + val + postfix;\n        };\n    }\n\n\n    getChartOptions(finalChartOptions, chartType,extraData,responsive_options,elementId) {\n        if (chartType === 'heatmap') {\n            finalChartOptions.responsive = responsive_options\n            // Add loaded event to remove fixed height\n            finalChartOptions.chart.events = {\n                mounted: (chartContext, config) => {\n                    // More specific selector targeting only the chart container\n                    const chartElement = document.querySelector(`.graphina-elementor-chart[data-element_id=\"${elementId}\"]`);\n                    if (chartElement) {\n                        // Remove fixed height but keep min-height for proper rendering\n                        chartElement.style.height = '';\n                    }\n                },\n               \n            };\n        }        \n        \n        return finalChartOptions;\n    }\n}\n\n// Initialize HeatmapChart\nwindow.graphinaHeatmapChart = new HeatmapChart();\n"],"names":["HeatmapChart","GraphinaApexChartBase","element","chartOptions","extraData","prefix","postfix","series","val","index","seriesName","_a","datalabelPreFix","datalabelPostFix","axisIndex","finalChartOptions","chartType","responsive_options","elementId","chartContext","config","chartElement"],"mappings":"wDAGe,MAAMA,UAAqBC,CAAsB,CAC5D,aAAc,CACV,MAAO,EACP,KAAK,SAAW,EACxB,CAII,oBAAqB,CACjB,KAAK,cAAgB,CACjB,QAAUC,GAAY,KAAK,oBAAoBA,EAAS,SAAS,CACpE,CACT,CAEI,oBAAoBC,EAAcC,EAAW,CACzC,MAAMC,EAASD,EAAU,oBAAsB,GACzCE,EAAUF,EAAU,qBAAuB,GAC3CG,EAASJ,EAAa,QAAU,CAAE,EAExCA,EAAa,MAAQ,CACjB,OAAQ,CACJ,UAAW,SAAUK,EAAK,OACtB,MAAMC,EAAQ,SAASD,EAAK,EAAE,EACxBE,IAAaC,EAAAJ,EAAOE,CAAK,IAAZ,YAAAE,EAAe,OAAQH,EAC1C,OAAOH,EAASK,EAAaJ,CACjD,CACA,CACS,CACT,CAEI,wBAAwBH,EAAcC,EAAW,CAE7C,IAAIQ,EAAkBR,EAAU,wBAA0B,GACtDS,EAAmBT,EAAU,yBAA2B,GACvDD,EAAa,aACdA,EAAa,WAAa,CAAE,GAEhCA,EAAa,WAAW,UAAaK,IAC7BJ,EAAU,gBACVI,EAAM,KAAK,aAAaA,EAAKJ,EAAU,oCAAoC,GAExEQ,EAAkBJ,EAAMK,EAE3C,CAGI,oBAAoBV,EAAcC,EAAWU,EAAY,GAAO,CAiBpE,CAGI,gBAAgBC,EAAmBC,EAAUZ,EAAUa,EAAmBC,EAAW,CACjF,OAAIF,IAAc,YACdD,EAAkB,WAAaE,EAE/BF,EAAkB,MAAM,OAAS,CAC7B,QAAS,CAACI,EAAcC,IAAW,CAE/B,MAAMC,EAAe,SAAS,cAAc,8CAA8CH,CAAS,IAAI,EACnGG,IAEAA,EAAa,MAAM,OAAS,GAEnC,CAEJ,GAGEN,CACf,CACA,CAGA,OAAO,qBAAuB,IAAIf"}