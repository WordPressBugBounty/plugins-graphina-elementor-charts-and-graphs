{"version":3,"file":"brush.js","sources":["../assets/elementor/js/apex-chart/BrushChart.js"],"sourcesContent":["import GraphinaApexChartBase from './GraphinaApexChartBase';\n\n// Child class specifically for Brush Charts\nexport default class BrushChart extends GraphinaApexChartBase {\n    constructor() {\n        super();\n        this.observer = {}; // For IntersectionObserver\n        this.secondaryChart = [];\n        this.secondaryChartData = [];\n        this.dynamic_data  = []\n    }\n\n    // Setup handlers for brush chart type\n    setUpChartsHandler() {\n        this.chartHandlers = {\n            brush: (element) => this.observeChartElement(element, 'area'),\n        };\n    }\n   \n    afterRenderChart(chart, elementId,extra_data) {\n        // Ensure secondary chart is initialized after primary chart is rendered\n        if(chart){\n        }\n        this.initSChart(elementId,extra_data);\n    }\n\n    applyDataLabelFormatter(chartOptions, extraData, chart_type = 'brush') {\n        let datalabelPreFix  = extraData.chart_datalabel_prefix ?? '';\n        let datalabelPostFix = extraData.chart_datalabel_postfix ?? '';\n        let useCommas        = extraData.string_format === true || extraData.string_format === 'yes';\n\n        // Parse and sanitize decimal value\n        let decimal = parseInt(extraData.chart_label_pointer_number_for_label);\n        if (isNaN(decimal) || decimal < 0 || decimal > 20) {\n            decimal = 0;\n        }\n\n        // Ensure dataLabels object exists\n        if (!chartOptions.dataLabels) {\n            chartOptions.dataLabels = {};\n        }\n\n        // Apply formatter\n        chartOptions.dataLabels.formatter = (val) => {\n            let formattedVal = val;\n\n            if (useCommas) {\n                // Use formatNumber from GraphinaApexChartBase (assuming \"this\" is bound to correct class)\n                formattedVal = this.formatNumber(val, decimal);\n            }\n\n            return datalabelPreFix + formattedVal + datalabelPostFix;\n        };\n    }\n\n\n    getChartOptions(finalChartOptions, chartType, extraData, responsive_options, elementId) {\n        if (chartType === 'brush') {\n        }\n        return finalChartOptions;\n    }\n    processDynamicData(dynamicData,elementId,extraData){\n        if( (extraData.chart_data_option === true)){\n            this.dynamic_data = dynamicData;\n        }else{\n            this.dynamic_data = {}\n        }\n\n    }\n\n    initSChart(elementId,extra_data) {\n        const chartEle = jQuery(`.graphina-brush-chart-${elementId}-2`)\n        let primarychartOption = chartEle.data('second_chart_options')\n        ApexCharts.exec(`brush-chart-${elementId}-2`, 'destroy');\n        if (this.secondaryChart[elementId]) {\n            this.secondaryChart[elementId].destroy()\n        }\n        if( this.dynamic_data.length > 0 && (this.dynamic_data.extra.series.length > 0) && (extra_data.chart_data_option === true)){\n            primarychartOption.series = this.dynamic_data.extra.series\n            primarychartOption.xaxis.categories = this.dynamic_data.extra.category\n        }\n\n        this.applyYAxisFormatter(primarychartOption,extra_data)\n        this.applyXAxisFormatter(primarychartOption, extra_data);\n\n        try {\n            this.secondaryChart[elementId] = new ApexCharts(chartEle[0], primarychartOption);\n            this.secondaryChart[elementId].render();\n        } catch (error) {\n            console.log(error);\n        }\n        \n    }\n}\n\n// Initialize BrushChart\nwindow.graphinaBrushChart = new BrushChart();\n"],"names":["BrushChart","GraphinaApexChartBase","element","chart","elementId","extra_data","chartOptions","extraData","chart_type","datalabelPreFix","datalabelPostFix","useCommas","decimal","val","formattedVal","finalChartOptions","chartType","responsive_options","dynamicData","chartEle","primarychartOption","error"],"mappings":"+CAGe,MAAMA,UAAmBC,CAAsB,CAC1D,aAAc,CACV,MAAO,EACP,KAAK,SAAW,GAChB,KAAK,eAAiB,CAAE,EACxB,KAAK,mBAAqB,CAAE,EAC5B,KAAK,aAAgB,CAAA,CAC7B,CAGI,oBAAqB,CACjB,KAAK,cAAgB,CACjB,MAAQC,GAAY,KAAK,oBAAoBA,EAAS,MAAM,CAC/D,CACT,CAEI,iBAAiBC,EAAOC,EAAUC,EAAY,CAI1C,KAAK,WAAWD,EAAUC,CAAU,CAC5C,CAEI,wBAAwBC,EAAcC,EAAWC,EAAa,QAAS,CACnE,IAAIC,EAAmBF,EAAU,wBAA0B,GACvDG,EAAmBH,EAAU,yBAA2B,GACxDI,EAAmBJ,EAAU,gBAAkB,IAAQA,EAAU,gBAAkB,MAGnFK,EAAU,SAASL,EAAU,oCAAoC,GACjE,MAAMK,CAAO,GAAKA,EAAU,GAAKA,EAAU,MAC3CA,EAAU,GAITN,EAAa,aACdA,EAAa,WAAa,CAAE,GAIhCA,EAAa,WAAW,UAAaO,GAAQ,CACzC,IAAIC,EAAeD,EAEnB,OAAIF,IAEAG,EAAe,KAAK,aAAaD,EAAKD,CAAO,GAG1CH,EAAkBK,EAAeJ,CAC3C,CACT,CAGI,gBAAgBK,EAAmBC,EAAWT,EAAWU,EAAoBb,EAAW,CAGpF,OAAOW,CACf,CACI,mBAAmBG,EAAYd,EAAUG,EAAU,CAC1CA,EAAU,oBAAsB,GACjC,KAAK,aAAeW,EAEpB,KAAK,aAAe,CAAA,CAGhC,CAEI,WAAWd,EAAUC,EAAY,CAC7B,MAAMc,EAAW,OAAO,yBAAyBf,CAAS,IAAI,EAC9D,IAAIgB,EAAqBD,EAAS,KAAK,sBAAsB,EAC7D,WAAW,KAAK,eAAef,CAAS,KAAM,SAAS,EACnD,KAAK,eAAeA,CAAS,GAC7B,KAAK,eAAeA,CAAS,EAAE,QAAO,EAEtC,KAAK,aAAa,OAAS,GAAM,KAAK,aAAa,MAAM,OAAO,OAAS,GAAOC,EAAW,oBAAsB,KACjHe,EAAmB,OAAS,KAAK,aAAa,MAAM,OACpDA,EAAmB,MAAM,WAAa,KAAK,aAAa,MAAM,UAGlE,KAAK,oBAAoBA,EAAmBf,CAAU,EACtD,KAAK,oBAAoBe,EAAoBf,CAAU,EAEvD,GAAI,CACA,KAAK,eAAeD,CAAS,EAAI,IAAI,WAAWe,EAAS,CAAC,EAAGC,CAAkB,EAC/E,KAAK,eAAehB,CAAS,EAAE,OAAQ,CAC1C,OAAQiB,EAAO,CACZ,QAAQ,IAAIA,CAAK,CAC7B,CAEA,CACA,CAGA,OAAO,mBAAqB,IAAIrB"}