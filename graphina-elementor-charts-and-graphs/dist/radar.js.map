{"version":3,"file":"radar.js","sources":["../assets/elementor/js/apex-chart/RadarChart.js"],"sourcesContent":["import GraphinaApexChartBase from './GraphinaApexChartBase';\n\n// Child class specifically for Radar Charts\nexport default class RadarChart extends GraphinaApexChartBase {\n    constructor() {\n        super();\n        this.observer = {}; // For IntersectionObserver\n    }\n\n    // Setup handlers for Radar chart type\n    setUpChartsHandler() {\n        this.chartHandlers = {\n            radar: (element) => this.observeChartElement(element, 'radar'),\n        };\n    }\n    applyDataLabelFormatter(chartOptions, extraData,forminatorPercentage=false) {\n        const datalabelPreFix = extraData.chart_datalabel_prefix;\n        const datalabelPostFix = extraData.chart_datalabel_postfix;\n        if (chartOptions.dataLabels) {\n            if (extraData.string_format) {\n                chartOptions.dataLabels.formatter = function (val, opts) {\n                    val = datalabelPreFix + this.formatNumber(val, extraData.chart_label_pointer_number_for_label) + datalabelPostFix;\n                    if (extraData.chart_datalabels_format_showlabel) {\n                        let label = opts.w.globals.labels[opts.seriesIndex];\n                        return label + \"-\" + datalabelPreFix + val + datalabelPostFix;\n                    }\n                    return datalabelPreFix + val + datalabelPostFix;\n                };\n            } else {\n                chartOptions.dataLabels.formatter = (val, opts) => {\n                    let formattedVal;\n                    if (forminatorPercentage) {\n                        let totals = opts.w.globals.seriesTotals.reduce((a, b) => a + b, 0);\n                        formattedVal = new Intl.NumberFormat(window.gcfe_public_localize.locale_with_hyphen, {\n                            minimumFractionDigits: extraData.chart_label_pointer_number_for_label,\n                            maximumFractionDigits: extraData.chart_label_pointer_number_for_label,\n                        }).format(val / totals * 100);\n                    } else {\n                        formattedVal = new Intl.NumberFormat(window.gcfe_public_localize.locale_with_hyphen, {\n                            minimumFractionDigits: extraData.chart_label_pointer_number_for_label,\n                            maximumFractionDigits: extraData.chart_label_pointer_number_for_label,\n                        }).format(val);\n                    }\n                    if (extraData.chart_datalabels_format_showlabel) {\n                        let label = opts.w.globals.labels[opts.seriesIndex];\n                        return label + \"-\" + datalabelPreFix + formattedVal + datalabelPostFix;\n                    }\n                    return datalabelPreFix + formattedVal + datalabelPostFix;\n                }    \n            }\n        }\n\n    }\n   \n   \n    getChartOptions(finalChartOptions, chartType, extraData, elementId) {\n        if (chartType === 'radar') {\n             // Add loaded event to remove fixed height\n             finalChartOptions.chart.events = {\n                mounted: (chartContext, config) => {\n                    // More specific selector targeting only the chart container\n                    const chartElement = document.querySelector(`.graphina-elementor-chart[data-element_id=\"${elementId}\"]`);\n                    if (chartElement) {\n                        // Remove fixed height but keep min-height for proper rendering\n                        chartElement.style.height = '';\n                    }\n                },\n               \n            };\n        }\n        \n        return finalChartOptions;\n    }\n}\n\n// Initialize RadarChart\nwindow.graphinaRadarChart = new RadarChart();\n"],"names":["RadarChart","GraphinaApexChartBase","element","chartOptions","extraData","forminatorPercentage","datalabelPreFix","datalabelPostFix","val","opts","formattedVal","totals","a","finalChartOptions","chartType","elementId","chartContext","config","chartElement"],"mappings":"+CAGe,MAAMA,UAAmBC,CAAsB,CAC1D,aAAc,CACV,MAAO,EACP,KAAK,SAAW,EACxB,CAGI,oBAAqB,CACjB,KAAK,cAAgB,CACjB,MAAQC,GAAY,KAAK,oBAAoBA,EAAS,OAAO,CAChE,CACT,CACI,wBAAwBC,EAAcC,EAAUC,EAAqB,GAAO,CACxE,MAAMC,EAAkBF,EAAU,uBAC5BG,EAAmBH,EAAU,wBAC/BD,EAAa,aACTC,EAAU,cACVD,EAAa,WAAW,UAAY,SAAUK,EAAKC,EAAM,CAErD,OADAD,EAAMF,EAAkB,KAAK,aAAaE,EAAKJ,EAAU,oCAAoC,EAAIG,EAC7FH,EAAU,kCACEK,EAAK,EAAE,QAAQ,OAAOA,EAAK,WAAW,EACnC,IAAMH,EAAkBE,EAAMD,EAE1CD,EAAkBE,EAAMD,CAClC,EAEDJ,EAAa,WAAW,UAAY,CAACK,EAAKC,IAAS,CAC/C,IAAIC,EACJ,GAAIL,EAAsB,CACtB,IAAIM,EAASF,EAAK,EAAE,QAAQ,aAAa,OAAO,CAACG,EAAG,IAAMA,EAAI,EAAG,CAAC,EAClEF,EAAe,IAAI,KAAK,aAAa,OAAO,qBAAqB,mBAAoB,CACjF,sBAAuBN,EAAU,qCACjC,sBAAuBA,EAAU,oCACpC,CAAA,EAAE,OAAOI,EAAMG,EAAS,GAAG,CACpD,MACwBD,EAAe,IAAI,KAAK,aAAa,OAAO,qBAAqB,mBAAoB,CACjF,sBAAuBN,EAAU,qCACjC,sBAAuBA,EAAU,oCAC7D,CAAyB,EAAE,OAAOI,CAAG,EAEjB,OAAIJ,EAAU,kCACEK,EAAK,EAAE,QAAQ,OAAOA,EAAK,WAAW,EACnC,IAAMH,EAAkBI,EAAeH,EAEnDD,EAAkBI,EAAeH,CAC3C,EAIjB,CAGI,gBAAgBM,EAAmBC,EAAWV,EAAWW,EAAW,CAChE,OAAID,IAAc,UAEbD,EAAkB,MAAM,OAAS,CAC9B,QAAS,CAACG,EAAcC,IAAW,CAE/B,MAAMC,EAAe,SAAS,cAAc,8CAA8CH,CAAS,IAAI,EACnGG,IAEAA,EAAa,MAAM,OAAS,GAEnC,CAEJ,GAGEL,CACf,CACA,CAGA,OAAO,mBAAqB,IAAIb"}