{"version":3,"file":"counter-CqLVqyOX.js","sources":["../assets/elementor/js/apex-chart/CounterChart.js"],"sourcesContent":["import GraphinaApexChartBase from './GraphinaApexChartBase';\n\n// Child class specifically for Counter Charts\nexport default class CounterChart extends GraphinaApexChartBase {\n    constructor() {\n        super();\n        this.observer = null; // For IntersectionObserver\n    }\n\n    // Setup handlers for Counter chart type\n    setUpChartsHandler() {\n        this.chartHandlers = {\n            counter: (element) => this.observeChartElement(element, 'counter'),\n        };\n    }\n\n    // Setup IntersectionObserver to call setupChart when the element is in the viewport\n    observeChartElement(element, chartType) {\n        if (gcfe_public_localize.view_port === 'off') {\n            if (!this.observer) {\n                this.observer = new IntersectionObserver((entries) => {\n                    entries.forEach((entry) => {\n                        if (entry.isIntersecting) {\n                            this.setupChart(jQuery(entry.target), chartType);\n                            this.observer.unobserve(entry.target); // Stop observing after it triggers\n                        }\n                    });\n                }, { threshold: 0.1 }); // Trigger when 10% of the element is visible\n            }\n            this.observer.observe(element[0]); // Start observing the element\n        } else {\n            this.setupChart(element, chartType);\n        }\n    }\n\n    afterManualLoad(dynamicData, elementId, extraData) {\n        this.startCounterAnimation(elementId, false, dynamicData,extraData);\n    }\n\n    afterDynamicLoad(dynamicData, elementId, extraData) {\n        // Add data processing specific to 'counter' charts if needed\n        this.startCounterAnimation(elementId, true, dynamicData,extraData)\n    }\n\n    afterRenderChart(chart,elementId,extraData){\n\n        if(extraData.color !== '' ) {\n            document.querySelector(`.count_number-pre-postfix-${elementId}`).style.color = extraData.color\n        }\n \n        if(extraData.headingColor !== ''){\n            document.querySelector(`.counter-title-${elementId}`).style.color = extraData.headingColor\n        }\n        if(extraData.subHeadingColor !== ''){\n            document.querySelector(`.counter-description-${elementId}`).style.color = extraData.subHeadingColor\n        }\n        if(!extraData.show_counter_chart){\n            chart.destroy()\n        }\n    }\n    // Function to start the counter animation\n    startCounterAnimation(element_id, is_dynamic = false, dynamicData = [],extraData) {\n        const counter = document.querySelector(`.count_number-${element_id}`);\n\n        let start = parseFloat(counter.getAttribute('data-start'));\n        let end = parseFloat(counter.getAttribute('data-end'));\n        let speed = parseInt(counter.getAttribute('data-speed'), 10);\n        let decimals = parseInt(counter.getAttribute('data-decimals'), 10) || 0;\n        if (is_dynamic) {\n            end = dynamicData.extra.end;\n        }\n\n        const duration = speed || 2000;\n        const increment = (end - start) / (duration / 50);\n\n        let current = start;\n\n        function formatNumber(number, thousandSeparator = '') {\n            // Convert to string and split by decimal point if any\n            const parts = number.toString().split('.');\n            \n            // Add thousand separators to the integer part\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousandSeparator);\n            \n            // Join back with decimal part if it exists\n            return parts.join('.');\n        }\n        // counter.textContent = 0\n        function updateCounter() {\n            if (current < end) {\n                current = Math.min(current + increment, end);\n                counter.textContent = formatNumber(current.toFixed(decimals),extraData.seperator);\n                requestAnimationFrame(updateCounter); // Continue animation\n            } else {\n                counter.textContent = formatNumber(end.toFixed(decimals),extraData.seperator); // Ensure we stop at the exact value\n            }\n        }\n\n        updateCounter(); // Start the counter animation\n    }\n\n    setFieldsForCounter(settings,response, chartType,extraData){\n         // Determine the type of data source and select appropriate fields\n         const FieldSelector = `[data-setting=\"${extraData.graphina_prefix}${chartType}_element_column_no\"]`;\n         const element = parent.document.querySelector(FieldSelector);\n     \n         // Exit if either element is not found\n         if (!element) return;\n     \n         // Clear existing options in the dropdowns\n         element.innerHTML = '';\n     \n         // Determine the data source for options and extra data keys\n         const options   = response.extra.columns;\n         const xExtraKey = extraData.element_column_no;\n         // Populate the dropdown fields with options\n         options.forEach((option) => {\n                 const isSelectedX = Array.isArray(xExtraKey) ? xExtraKey.includes(option) : xExtraKey === option;\n                 element.append(new Option(option, option, isSelectedX, isSelectedX));\n         });\n    }\n\n    // Get chart options, including Counter chart configuration\n    getChartOptions(finalChartOptions, chartType, extraData, responsive_options, elementId) {\n        if (chartType === 'counter') {\n            finalChartOptions.responsive = responsive_options\n        }\n        return finalChartOptions;\n    }\n}\n\n// Initialize CounterChart\nnew CounterChart();\n"],"names":["CounterChart","GraphinaApexChartBase","element","chartType","entries","entry","dynamicData","elementId","extraData","chart","element_id","is_dynamic","counter","start","end","speed","decimals","duration","increment","current","formatNumber","number","thousandSeparator","parts","updateCounter","settings","response","FieldSelector","options","xExtraKey","option","isSelectedX","finalChartOptions","responsive_options"],"mappings":"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"}