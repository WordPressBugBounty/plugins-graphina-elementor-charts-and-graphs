{"version":3,"file":"column-BphAJkBm.js","sources":["../assets/elementor/js/apex-chart/ColumnChart.js"],"sourcesContent":["import GraphinaApexChartBase from './GraphinaApexChartBase';\n\n// Child class specifically for Column Charts\nexport default class ColumnChart extends GraphinaApexChartBase {\n    constructor() {\n        super();\n        this.observer = {}; // For IntersectionObserver\n    }\n    \n    // Setup handlers for column chart type\n    setUpChartsHandler() {\n        this.chartHandlers = {\n            column: (element) => this.observeChartElement(element, 'bar'),\n        };\n    }\n\n    // Apply Y-axis label formatting\n    applyYAxisFormatter(chartOptions, extraData, axisIndex = false) {\n        const formatAxisLabels = (val, prefix, postfix, decimal, axisIndex) => {\n            if (extraData.yaxis_label_format && (axisIndex === 0 || axisIndex === false)) {\n                return prefix + new Intl.NumberFormat(window.gcfe_public_localize.locale_with_hyphen, {\n                    minimumFractionDigits: decimal,\n                    maximumFractionDigits: decimal,\n                }).format(val) + postfix;\n            } else if (extraData.chart_opposite_yaxis_format_number && axisIndex === 1) {\n                return prefix + new Intl.NumberFormat(window.gcfe_public_localize.locale_with_hyphen, {\n                    minimumFractionDigits: decimal,\n                    maximumFractionDigits: decimal,\n                }).format(val) + postfix;\n            }\n            return prefix + val + postfix;\n        };\n\n        const updateYAxisLabels = (axis, prefix, postfix, decimal, axisIndex) => {\n            if (!axis.labels) {\n                axis.labels = {}; // Initialize yaxis.labels if it doesn't exist\n            }\n            axis.labels.formatter = (val) => { \n                formatAxisLabels(val, prefix, postfix, decimal, axisIndex) \n            };\n        };\n\n        if(extraData.is_chart_horizontal){\n\n            if(extraData.yaxis_label_prefix_show){\n                chartOptions.yaxis.labels.formatter = (val) => {\n                    return extraData.yaxis_label_prefix + val + extraData.yaxis_label_postfix;\n                } \n            }\n\n            if (extraData.chart_xaxis_label_pointer) {\n                chartOptions.xaxis.labels.formatter = (val) => {\n                    return extraData.xaxis_label_prefix + this.formatNumber(val, extraData.xaxis_label_pointer_number) + extraData.xaxis_label_postfix;\n                }\n            }else if(extraData.chart_xaxis_format_number === true){\n                chartOptions.xaxis.labels.formatter = (val) => {\n                    return extraData.xaxis_label_prefix + new Intl.NumberFormat(window.gcfe_public_localize.locale_with_hyphen, {\n                        minimumFractionDigits: extraData.xaxis_label_pointer_number,\n                        maximumFractionDigits: extraData.xaxis_label_pointer_number,\n                    }).format(val) + extraData.xaxis_label_postfix;\n                }\n            }\n        }else{\n            if (axisIndex === false) {\n                updateYAxisLabels(chartOptions.yaxis, extraData.yaxis_label_prefix, extraData.yaxis_label_postfix, extraData.decimal_in_float,axisIndex);\n            } else if (axisIndex === 0 || axisIndex === 1) {\n                let yaxis = chartOptions.yaxis[axisIndex];\n                let prefix = axisIndex === 0 ? extraData.yaxis_label_prefix : extraData.chart_opposite_yaxis_label_prefix;\n                let postfix = axisIndex === 0 ? extraData.yaxis_label_postfix : extraData.chart_opposite_yaxis_label_postfix;\n                let decimal = extraData.decimal_in_float;\n                updateYAxisLabels(yaxis, prefix, postfix, decimal, axisIndex);\n            }\n        }\n    }\n\n\n    getChartOptions(finalChartOptions, chartType,extraData,responsive_options,elementId) {\n        finalChartOptions.responsive = responsive_options\n        return finalChartOptions;\n    }\n}\n// Initialize ColumnrChart\nnew ColumnChart();\n"],"names":["ColumnChart","GraphinaApexChartBase","element","chartOptions","extraData","axisIndex","formatAxisLabels","val","prefix","postfix","decimal","updateYAxisLabels","axis","yaxis","finalChartOptions","chartType","responsive_options","elementId"],"mappings":"wDAGe,MAAMA,UAAoBC,CAAsB,CAC3D,aAAc,CACV,MAAO,EACP,KAAK,SAAW,EACxB,CAGI,oBAAqB,CACjB,KAAK,cAAgB,CACjB,OAASC,GAAY,KAAK,oBAAoBA,EAAS,KAAK,CAC/D,CACT,CAGI,oBAAoBC,EAAcC,EAAWC,EAAY,GAAO,CAC5D,MAAMC,EAAmB,CAACC,EAAKC,EAAQC,EAASC,EAASL,IACjDD,EAAU,qBAAuBC,IAAc,GAAKA,IAAc,IAC3DG,EAAS,IAAI,KAAK,aAAa,OAAO,qBAAqB,mBAAoB,CAClF,sBAAuBE,EACvB,sBAAuBA,CAC3C,CAAiB,EAAE,OAAOH,CAAG,EAAIE,EACVL,EAAU,oCAAsCC,IAAc,EAC9DG,EAAS,IAAI,KAAK,aAAa,OAAO,qBAAqB,mBAAoB,CAClF,sBAAuBE,EACvB,sBAAuBA,CAC3C,CAAiB,EAAE,OAAOH,CAAG,EAAIE,EAEdD,EAASD,EAAME,EAGpBE,EAAoB,CAACC,EAAMJ,EAAQC,EAASC,EAASL,IAAc,CAChEO,EAAK,SACNA,EAAK,OAAS,IAElBA,EAAK,OAAO,UAAaL,GAAQ,CAC7BD,EAAiBC,EAAKC,EAAQC,EAASC,EAASL,CAAS,CAC5D,CACJ,EAED,GAAGD,EAAU,oBAENA,EAAU,0BACTD,EAAa,MAAM,OAAO,UAAaI,GAC5BH,EAAU,mBAAqBG,EAAMH,EAAU,qBAI1DA,EAAU,0BACVD,EAAa,MAAM,OAAO,UAAaI,GAC5BH,EAAU,mBAAqB,KAAK,aAAaG,EAAKH,EAAU,0BAA0B,EAAIA,EAAU,oBAE9GA,EAAU,4BAA8B,KAC7CD,EAAa,MAAM,OAAO,UAAaI,GAC5BH,EAAU,mBAAqB,IAAI,KAAK,aAAa,OAAO,qBAAqB,mBAAoB,CACxG,sBAAuBA,EAAU,2BACjC,sBAAuBA,EAAU,0BACpC,CAAA,EAAE,OAAOG,CAAG,EAAIH,EAAU,6BAI/BC,IAAc,GACdM,EAAkBR,EAAa,MAAOC,EAAU,mBAAoBA,EAAU,oBAAqBA,EAAU,iBAAiBC,CAAS,UAChIA,IAAc,GAAKA,IAAc,EAAG,CAC3C,IAAIQ,EAAQV,EAAa,MAAME,CAAS,EACpCG,EAASH,IAAc,EAAID,EAAU,mBAAqBA,EAAU,kCACpEK,EAAUJ,IAAc,EAAID,EAAU,oBAAsBA,EAAU,mCACtEM,EAAUN,EAAU,iBACxBO,EAAkBE,EAAOL,EAAQC,EAASC,EAASL,CAAS,CAC5E,CAEA,CAGI,gBAAgBS,EAAmBC,EAAUX,EAAUY,EAAmBC,EAAW,CACjF,OAAAH,EAAkB,WAAaE,EACxBF,CACf,CACA,CAEA,IAAId"}