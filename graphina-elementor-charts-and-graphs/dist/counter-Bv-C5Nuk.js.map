{"version":3,"file":"counter-Bv-C5Nuk.js","sources":["../assets/elementor/js/apex-chart/CounterChart.js"],"sourcesContent":["import GraphinaApexChartBase from './GraphinaApexChartBase';\n\n// Child class specifically for Counter Charts\nexport default class CounterChart extends GraphinaApexChartBase {\n    constructor() {\n        super();\n        this.observer = {}; // For IntersectionObserver\n    }\n    \n\n    // Setup handlers for Counter chart type\n    setUpChartsHandler() {\n        this.chartHandlers = {\n            counter: (element) => this.observeChartElement(element, 'counter'),\n        };\n    }\n   \n\n    afterManualLoad(dynamicData, elementId, extraData) {\n        this.startCounterAnimation(elementId, false, dynamicData,extraData);\n    }\n\n    afterDynamicLoad(dynamicData, elementId, extraData) {\n        // Add data processing specific to 'counter' charts if needed\n        this.startCounterAnimation(elementId, true, dynamicData,extraData)\n    }\n\n    afterRenderChart(chart,elementId,extraData){\n\n        if(extraData.color !== '' ) {\n            document.querySelector(`.count_number-pre-postfix-${elementId}`).style.color = extraData.color\n        }\n \n        if(extraData.headingColor !== ''){\n            document.querySelector(`.counter-title-${elementId}`).style.color = extraData.headingColor\n        }\n        if(extraData.subHeadingColor !== ''){\n            document.querySelector(`.counter-description-${elementId}`).style.color = extraData.subHeadingColor\n        }\n        if(!extraData.show_counter_chart){\n            chart.destroy()\n        }\n    }\n    // Function to start the counter animation\n    startCounterAnimation(element_id, is_dynamic = false, dynamicData = [],extraData) {\n        const counter = document.querySelector(`.count_number-${element_id}`);\n\n        let start = parseFloat(counter.getAttribute('data-start'));\n        let end = parseFloat(counter.getAttribute('data-end'));\n        let speed = parseInt(counter.getAttribute('data-speed'), 10);\n        let decimals = parseInt(counter.getAttribute('data-decimals'), 10) || 0;\n        if (is_dynamic) {\n            end = dynamicData.extra.end;\n            try {\n                document.querySelector(`.counter-title-${element_id}`).innerHTML = dynamicData.extra.title\n            } catch (error) {\n                console.warn(error);\n            }\n        }\n\n        const duration = speed || 2000;\n        const increment = (end - start) / (duration / 50);\n\n        let current = start;\n\n        function formatNumber(number, thousandSeparator = '') {\n            // Convert to string and split by decimal point if any\n            const parts = number.toString().split('.');\n            \n            // Add thousand separators to the integer part\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousandSeparator);\n            \n            // Join back with decimal part if it exists\n            return parts.join('.');\n        }\n        // counter.textContent = 0\n        function updateCounter() {\n            if (current < end) {\n                current = Math.min(current + increment, end);\n                counter.textContent = formatNumber(current.toFixed(decimals),extraData.seperator);\n                requestAnimationFrame(updateCounter); // Continue animation\n            } else {\n                counter.textContent = formatNumber(end.toFixed(decimals),extraData.seperator); // Ensure we stop at the exact value\n            }\n        }\n\n        updateCounter(); // Start the counter animation\n    }\n\n    setFieldsForCounter(settings,response, chartType,extraData){\n         // Determine the type of data source and select appropriate fields\n         const FieldSelector = `[data-setting=\"${extraData.graphina_prefix}${chartType}_element_column_no\"]`;\n         const element = parent.document.querySelector(FieldSelector);\n     \n         // Exit if either element is not found\n         if (!element) return;\n     \n         // Clear existing options in the dropdowns\n         element.innerHTML = '';\n     \n         // Determine the data source for options and extra data keys\n         const options   = response.extra.columns;\n         const xExtraKey = extraData.element_column_no;\n         // Populate the dropdown fields with options\n         options.forEach((option) => {\n                 const isSelectedX = Array.isArray(xExtraKey) ? xExtraKey.includes(option) : xExtraKey === option;\n                 element.append(new Option(option, option, isSelectedX, isSelectedX));\n         });\n    }\n    processDynamicData(dynamicData,elementId,extraData){\n        dynamicData.extra.category = ['element1']\n    }\n    // Get chart options, including Counter chart configuration\n    getChartOptions(finalChartOptions, chartType, extraData, responsive_options, elementId) {\n        if (chartType === 'counter') {\n            finalChartOptions.responsive = responsive_options\n        }\n        return finalChartOptions;\n    }\n}\n\n// Initialize CounterChart\nnew CounterChart();\n"],"names":["CounterChart","GraphinaApexChartBase","element","dynamicData","elementId","extraData","chart","element_id","is_dynamic","counter","start","end","speed","decimals","error","duration","increment","current","formatNumber","number","thousandSeparator","parts","updateCounter","settings","response","chartType","FieldSelector","options","xExtraKey","option","isSelectedX","finalChartOptions","responsive_options"],"mappings":"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"}