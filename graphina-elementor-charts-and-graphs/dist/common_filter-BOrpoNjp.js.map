{"version":3,"file":"common_filter-BOrpoNjp.js","sources":["../assets/elementor/js/common-filter/CommonFilter.js"],"sourcesContent":["class FilterBase {\n\n    constructor() {\n        this.chartHandlers = {};\n        this.mainChart = {};\n        this.isGoogleChartsLoaded = false;\n        this.init();\n    }\n\n    init() {\n        this.bindEventHandlers();\n    }\n\n    bindEventHandlers() {\n        // Remove previous event listeners to prevent duplicates\n        jQuery(document).off('click', '.graphina-filter-div-button.common');\n\n        // Add event listener with proper selector\n        jQuery(document).on('click', '.graphina-filter-div-button.common', (e) => {\n            this.debounce(this.handleCommonChartUpdate.bind(this), 300)(e);\n        });\n\n\n    }\n\n    debounce(func, wait) {\n        let timeout;\n\n        return function (...args) {\n            const context = this;\n            clearTimeout(timeout);\n            timeout = setTimeout(() => func.apply(context, args), wait);\n        };\n    }\n\n    handleCommonChartUpdate(e) {\n        e.preventDefault()\n\n        const currentElement = e.currentTarget;\n\n        // Store the original button text\n        const originalText = currentElement.textContent;\n        currentElement.dataset.originalText = originalText;\n\n        // Get the localized loading text\n        const loadingText = gcfe_public_localize.loading_btn;\n\n        // Apply loading state to the button\n        currentElement.textContent = loadingText;\n        currentElement.classList.add('loading_btn');\n\n\n        const elementId = jQuery(currentElement).data('element_id')\n        const totalFilter = jQuery(`#graphina_chart_filter_${elementId}`).data('total_filter');\n        let filterValue = []\n\n        for (let index = 0; index < totalFilter; index++) {\n            filterValue[index] = jQuery(`#graphina-start-date_${index}${elementId}`).val() ??\n                jQuery(`#graphina-drop_down_filter_${index}${elementId}`).val();\n        }\n        // Find all chart elements on the page\n\n        const apexChartElements = jQuery('.common-filter-chart');\n        const googleChartElements = jQuery('.common-filter-google-chart');\n        \n        if (apexChartElements.length > 0) {\n            jQuery(document).find('.graphina-loader').show();\n\n            // Process ApexCharts\n            apexChartElements.each((index, element) => {\n                const chartElement = jQuery(element);\n                const elementId = chartElement.data('element_id');\n                const chartType = chartElement.data('chart_type');\n\n                if (this.mainChart[elementId]) {\n                    this.mainChart[elementId].destroy();\n                } else {\n                    ApexCharts.exec(elementId, 'destroy');\n                }\n                console.log(elementId);\n                \n                jQuery(document).find(`.graphina-${elementId}-loader`).show();\n                this.updateChartWithCommonFilter(chartElement, chartType, filterValue);\n            });\n            \n        }\n\n        if (googleChartElements.length > 0) {\n            // Show loader for all charts\n            jQuery(document).find('.graphina-loader').show();\n\n            // Process each chart\n            googleChartElements.each((index, element) => {\n                const chartElement = jQuery(element);\n                const elementId = chartElement.data('element_id');\n                const chartType = chartElement.data('chart_type_static');\n\n                // Show individual chart loader\n                jQuery(document).find(`.graphina-${elementId}-loader`).show();\n\n                // Update the chart with common filter value\n                this.UpdateGoogleChartWithCommonFilter(chartElement, chartType, filterValue);\n            });\n        }\n\n\n    }\n\n    getDynamicData(settings, extraData, chartType, elementId, filterValue) {\n\n        let action = 'graphina_get_dynamic_data'\n        let req_nonce = gcfe_public_localize.nonce\n        if (chartType === 'counter') {\n            action = 'get_jquery_datatable_data'\n            req_nonce = gcfe_public_localize.table_nonce\n        }\n        let post_id = jQuery(`[data-element_id=\"${elementId}\"]`).closest('[data-elementor-id]').data('elementor-id');\n        let field_post_id = post_id;\n        if (extraData.is_same_acf_field_id) {\n            field_post_id = extraData.custom_post_id_for_acf_field;\n        }\n\n        return new Promise((resolve, reject) => {\n            jQuery.ajax({\n                url: gcfe_public_localize.ajaxurl,\n                type: 'POST',\n                dataType: 'json',\n                data: {\n                    action: action,\n                    nonce: req_nonce,\n                    chartType: chartType,\n                    post_id: post_id,\n                    field_post_id: field_post_id,\n                    element_id: elementId,\n                    series_count: extraData.chart_data_series_count_dynamic,\n                    settings: JSON.stringify(settings),\n                    selected_field: filterValue\n                },\n                success: (response) => {\n                    if (response.status) {\n                        if (jQuery('body').hasClass(\"elementor-editor-active\")) {\n                            if (chartType === 'counter') {\n                                this.setFieldsForCounter(settings, response, chartType, extraData);\n                            }\n                            if ((extraData.chart_csv_column_wise_enable || extraData.chart_dynamic_data_option === 'sql-builder') && (extraData.chart_dynamic_data_option === 'csv' || extraData.chart_dynamic_data_option === 'remote-csv' || extraData.chart_dynamic_data_option === 'google-sheet' || extraData.chart_dynamic_data_option === 'sql-builder')) {\n                                this.setFieldsForCSV(settings, response, chartType, extraData);\n                            }\n                            if (extraData.dynamic_type === 'forminator') {\n                                this.setFieldForForminator(response, chartType, extraData);\n                            }\n                        };\n                    }\n\n                    jQuery('.graphina-filter-div-button.common')\n                        .removeClass('loading_btn')\n                        .prop('disabled', false)\n                        .each(function () {\n                            // Restore original text if it was stored\n                            const originalText = jQuery(this).data('original-text');\n                            if (originalText) {\n                                jQuery(this).text(originalText);\n                            } else {\n                                // Fallback to default text if no original text was stored\n                                jQuery(this).text(gcfe_public_localize.i18n.apply_filter || 'Apply Filter');\n                            }\n                        });\n\n                    resolve(response);\n                },\n                error: (error) => {\n                    console.error('AJAX Error:', error);\n                    reject(new Error('AJAX request failed.'));\n                },\n            });\n        });\n    }\n\n    getChartOptions(finalChartOptions, chartType, extraData, responsive_options, elementId) {\n        return finalChartOptions;\n    }\n\n    setupTableData(dynamicData, dataTable, googleChart, googleChartTexture, extraData) {\n\n        if (!dynamicData || !dataTable) {\n            console.warn('Required parameters are missing');\n            return;\n        }\n\n        try {\n            // Handle Google Chart Data format\n            if (dynamicData.google_chart_data?.title_array?.length > 0 &&\n                dynamicData.google_chart_data?.data?.length > 0) {\n\n                // Add title column\n                if (typeof dynamicData.google_chart_data.title === 'string') {\n                    dataTable.addColumn('string', dynamicData.google_chart_data.title);\n                }\n\n                // Add data columns\n                dynamicData.google_chart_data.title_array.forEach((col) => {\n                    if (col) {\n                        dataTable.addColumn('number', String(col));\n\n                        // Add annotation column if enabled\n                        if (dynamicData.google_chart_data.annotation_show === true) {\n                            dataTable.addColumn({ type: 'string', role: 'annotation' });\n                        }\n                    }\n                });\n\n                // Add data rows\n                if (Array.isArray(dynamicData.google_chart_data.data)) {\n                    dynamicData.google_chart_data.data.forEach(row => {\n                        if (Array.isArray(row)) {\n                            dataTable.addRow(row);\n                        }\n                    });\n                }\n\n                if (googleChart && googleChartTexture) {\n                    googleChart.show();\n                    googleChartTexture.hide();\n                }\n\n                // Handle regular column/row format\n            } else if (Array.isArray(dynamicData.columns) &&\n                Array.isArray(dynamicData.rows) &&\n                dynamicData.columns.length > 0 &&\n                dynamicData.rows.length > 0) {\n\n                dynamicData.columns.forEach((col) => {\n                    if (col) {\n                        dataTable.addColumn(col);\n                    }\n                });\n\n                dynamicData.rows.forEach(row => {\n                    if (Array.isArray(row)) {\n                        dataTable.addRow(row);\n                    }\n                });\n\n                // Handle empty/invalid data case\n            } else {\n                if (googleChart && googleChartTexture) {\n                    googleChart.hide();\n                    googleChartTexture.show();\n                }\n            }\n        } catch (error) {\n            console.error('Error setting up table data:', error);\n            if (googleChart && googleChartTexture) {\n                googleChart.hide();\n                googleChartTexture.show();\n            }\n        }\n\n    }\n    getFinalChartOptions(finalChartOptions) {\n        return finalChartOptions;\n    }\n    \n    // Method to update chart with common filter\n    async updateChartWithCommonFilter(chartElement, chartType, commonFilterValue) {\n        const elementId = chartElement.data('element_id');\n        const chartOptions = chartElement.data('chart_options');\n        const extraData = chartElement.data('extra_data');\n        const settings = chartElement.data('settings');\n\n        if (!chartOptions || !elementId || !chartType) {\n            console.error('Missing required chart options or element ID.');\n            jQuery(document).find(`.graphina-${elementId}-loader`).hide();\n            return;\n        }\n\n        try {\n            let filterValue = Array.isArray(commonFilterValue) ? commonFilterValue : [commonFilterValue];\n            const dynamicData = await this.getDynamicData(settings, extraData, chartType, elementId, filterValue);\n\n            // === Check for empty or missing data ===\n            const seriesData = dynamicData?.extra?.series ?? [];\n            const categoryData = dynamicData?.extra?.category ?? [];\n\n            const isEmptyData = (\n                !Array.isArray(seriesData) || seriesData.length === 0 ||\n                (Array.isArray(seriesData[0]?.data) && seriesData[0].data.length === 0)\n            );\n\n            if (isEmptyData) {\n                chartOptions.series = [];\n                chartOptions.xaxis.categories = [];\n\n                // Hide chart\n                chartElement.hide();\n\n                // Show No Data Found\n                jQuery(`.graphina-${elementId}-notext`).show();\n                jQuery(`.graphina-${elementId}-loader`).hide();\n                return;\n            } else {\n                jQuery(`.graphina-${elementId}-notext`).hide();\n            }\n\n            // === If data is valid, update chart ===\n            if (chartType === 'nested_column') {\n                chartOptions.series = [{ data: seriesData }];\n            } else if (chartType === 'column') {\n                chartOptions.chart.type = 'bar';\n                chartOptions.series = seriesData;\n                chartOptions.xaxis.categories = categoryData;\n            } else if (['polar', 'radialBar', 'radial', 'pie', 'donut'].includes(chartType)){\n\n                chartOptions.series = seriesData;\n                chartOptions.labels = categoryData;\n            }else{\n                chartOptions.series = seriesData;\n                chartOptions.xaxis.categories = categoryData;\n            }\n\n            // Show chart container\n            chartElement.show();\n            if (chartType === 'column' || chartType === 'distributed_column') {\n                chartOptions.chart.type = 'bar';\n            } else if (chartType === 'polar') {\n                chartOptions.chart.type = 'polarArea';\n            }\n\n            const finalChartOptions = this.getChartOptions(chartOptions, chartType, extraData, chartElement.data('responsive_options'), elementId);\n            chartElement.empty();\n            const chart = new ApexCharts(chartElement[0], finalChartOptions);\n\n            try {\n                await chart.render();\n            } catch (error) {\n                console.error('Error rendering chart:', error);\n            }\n            jQuery('.graphina-filter-div-button.common')\n                .removeClass('loading_btn')\n                .prop('disabled', false)\n                .each(function () {\n                    const originalText = jQuery(this).data('original-text');\n                    if (originalText) {\n                        jQuery(this).text(originalText);\n                    } else {\n                        jQuery(this).text(gcfe_public_localize.i18n.apply_filter || 'Apply Filter');\n                    }\n                });\n            jQuery(document).find(`.graphina-${elementId}-loader`).hide();\n        } catch (error) {\n            console.error('Error updating chart with common filter:', error);\n            jQuery(document).find(`.graphina-${elementId}-loader`).hide();\n        }\n    }\n\n    // Setup and render Google Chart\n    async UpdateGoogleChartWithCommonFilter(element, chartType, commonFilterValue) {\n\n        const chartBox = element.closest('.chart-box');\n        const googleChartTexture = chartBox ? chartBox.find('.google-chart-texture') : null;\n        const googleChart = chartBox ? chartBox.find('.graphina-google-chart') : null;\n\n        try {\n            const elementId = element.data('element_id');\n            const chart_type = element.data('chart_type');\n            const chartData = element.data('chart_data');\n            const extraData = element.data('extra_data');\n            const settings = element.data('settings');\n            const chartOptions = element.data('chart_options') || {};\n            const noTextContainer = jQuery(`.graphina-${elementId}-notext`);\n\n            // Ensure that Google Charts is loaded and only once\n            await this.loadGoogleCharts();\n\n            // Validate chartType\n            if (!google.visualization[chartType]) {\n\n                throw new Error(`Invalid chart type: ${chartType}`);\n            }\n            // Create a new DataTable\n            const dataTable = new google.visualization.DataTable();\n\n            if (extraData.chart_data_option) {\n                try {\n                    let filterValue = Array.isArray(commonFilterValue) ? commonFilterValue : [commonFilterValue];\n\n                    const totalFilter = jQuery(`#graphina_chart_filter_${elementId}`).data('total_filter');\n                    for (let index = 0; index < totalFilter; index++) {\n                        let rawValue = jQuery(`#graphina-start-date_${index}${elementId}`).val() ?? jQuery(`#graphina-drop_down_filter_${index}${elementId}`).val();\n                        filterValue[index] = typeof rawValue === 'string' ? rawValue.trim() : rawValue;\n                    }\n\n                    const dynamicData = await this.getDynamicData(settings, extraData, chart_type, elementId, filterValue);\n\n                    const hasData =\n                        (Array.isArray(dynamicData.google_chart_data?.data) && dynamicData.google_chart_data.data.length > 0) ||\n                        (Array.isArray(dynamicData.rows) && dynamicData.rows.length > 0);\n\n                    if (!hasData) {\n                        // Show \"No Data Found\", hide chart\n                        googleChart.hide();\n                        googleChartTexture.hide(); // optional if you want to hide grey bg too\n                        noTextContainer.show();\n                        \n                        jQuery(`.graphina-${elementId}-loader`).hide();\n                        return;\n                    } else {\n                        noTextContainer.hide();\n                    }\n                    this.setupTableData(dynamicData, dataTable, googleChart, googleChartTexture, extraData);\n\n                } catch (error) {\n                    googleChart.hide();\n                    googleChartTexture.show();\n                    noTextContainer.show();\n                    console.error('Failed to get dynamic data:', error);\n                }\n                jQuery(document).find(`.graphina-${elementId}-loader`).hide()\n            } else {\n\n                const finalChartData = this.getFinalChartData(chartData);\n\n                const hasData =\n                    (Array.isArray(finalChartData.google_chart_data?.data) && finalChartData.google_chart_data.data.length > 0) ||\n                    (Array.isArray(finalChartData.rows) && finalChartData.rows.length > 0);\n\n                if (!hasData) {\n                    googleChart.hide();\n                    googleChartTexture.hide();\n                    noTextContainer.show();\n                    jQuery(`.graphina-${elementId}-loader`).hide();\n                    return;\n                } else {\n                    noTextContainer.hide();\n                }\n\n                this.setupTableData(finalChartData, dataTable, googleChart, googleChartTexture, extraData);\n            }\n\n            if ('Gantt' === chartType) {\n                this.setDependField(settings, extraData);\n            }\n\n            const chart = new google.visualization[chartType](element[0]);\n            const finalChartOptions = this.getFinalChartOptions(chartOptions, elementId);\n            chart.draw(dataTable, finalChartOptions);\n            \n        } catch (error) {\n            googleChart.hide();\n            googleChartTexture.show();\n            jQuery(`.graphina-${elementId}-notext`).show();\n            console.error(`Error initializing ${chartType} chart:`, error);\n        }\n    }\n\n\n    // Dynamically load the Google Charts library\n    async loadGoogleCharts() {\n\n        if (this.isGoogleChartsLoaded) return; // Prevent loading multiple times\n\n        return new Promise((resolve, reject) => {\n            try {\n                google.charts.load('current', { packages: ['corechart', 'geochart', 'gauge', 'gantt', 'orgchart'] });\n                google.charts.setOnLoadCallback(() => {\n                    this.isGoogleChartsLoaded = true;\n                    resolve();\n                });\n            } catch (error) {\n                console.error('Error loading Google Charts:', error);\n                reject(error);\n            }\n        });\n    }\n}\njQuery(() => {\n    window.GraphinaFilterBase = new FilterBase();\n});"],"names":["FilterBase","e","func","wait","timeout","args","context","currentElement","originalText","loadingText","elementId","totalFilter","filterValue","index","apexChartElements","googleChartElements","element","chartElement","chartType","settings","extraData","action","req_nonce","post_id","field_post_id","resolve","reject","response","error","finalChartOptions","responsive_options","dynamicData","dataTable","googleChart","googleChartTexture","_a","_b","_c","_d","col","row","commonFilterValue","chartOptions","seriesData","categoryData","chart","chartBox","chart_type","chartData","noTextContainer","rawValue","finalChartData"],"mappings":"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"}