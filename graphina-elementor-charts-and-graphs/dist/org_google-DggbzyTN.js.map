{"version":3,"file":"org_google-DggbzyTN.js","sources":["../assets/elementor/js/google-chart/OrgGoogleChart.js"],"sourcesContent":["import GraphinaGoogleChartBase from './GraphinaGoogleChartBase';\n\n// Child class specifically for Org Charts\nexport default class OrgChart extends GraphinaGoogleChartBase {\n    // Setup handlers for Org Chart\n    setUpChartsHandler() {\n        this.chartHandlers = {\n            org_google: (element) => this.observeChartElement(element, 'OrgChart'),\n        };\n    }\n\n    // Setup IntersectionObserver to call setupChart when the element is in the viewport\n    observeChartElement(element, chartType) {\n        if (gcfe_public_localize.view_port === 'off') {\n            if (!this.observer) {\n                this.observer = new IntersectionObserver((entries) => {\n                    entries.forEach((entry) => {\n                        if (entry.isIntersecting) {\n                            // Element is in viewport; initialize the chart\n                            this.setupChart(jQuery(entry.target), chartType);\n                            // Stop observing the element after initializing the chart\n                            this.observer.unobserve(entry.target);\n                        }\n                    });\n                }, { threshold: 0.1 }); // Trigger when at least 10% of the element is visible\n            }\n            this.observer.observe(element[0]); // Start observing the chart element\n        } else {\n            this.setupChart(element, chartType);\n        }\n    }\n\n    // Customize chart options for Org Charts (if needed)\n    getFinalChartOptions(chartOptions,elementId){\n        // Customize options here if needed\n        return chartOptions;\n    }\n\n    setupTableData(dynamicData,dataTable,googleChart,googleChartTexture,extraData){\n        if (dynamicData?.google_chart_data?.data?.length > 0) {\n            dataTable.addColumn('string', 'Child');\n            dataTable.addColumn('string', 'Parent');\n            dataTable.addColumn('string', 'Tooltip');\n             let temp = dynamicData.google_chart_data.data.map((x) => {\n                return this.prepareGanttRowData(x)\n            });\n            temp.forEach(row => dataTable.addRow(row));\n        } else if (dynamicData.length > 0) {\n            dataTable.addColumn('string', 'Child');\n            dataTable.addColumn('string', 'Parent');\n            dataTable.addColumn('string', 'Tooltip');\n            let temp = dynamicData.map((x) => {\n                return this.prepareGanttRowData(x)\n            });\n\n            temp.forEach(row => dataTable.addRow(row))\n        } else {\n            googleChart.hide()\n            googleChartTexture.show()\n        }\n    }\n}\n// Initialize Org Chart\nnew OrgChart();\n"],"names":["OrgChart","GraphinaGoogleChartBase","element","chartType","entries","entry","chartOptions","elementId","dynamicData","dataTable","googleChart","googleChartTexture","extraData","_b","_a","x","row"],"mappings":"0DAGe,MAAMA,UAAiBC,CAAwB,CAE1D,oBAAqB,CACjB,KAAK,cAAgB,CACjB,WAAaC,GAAY,KAAK,oBAAoBA,EAAS,UAAU,CACxE,CACT,CAGI,oBAAoBA,EAASC,EAAW,CAChC,qBAAqB,YAAc,OAC9B,KAAK,WACN,KAAK,SAAW,IAAI,qBAAsBC,GAAY,CAClDA,EAAQ,QAASC,GAAU,CACnBA,EAAM,iBAEN,KAAK,WAAW,OAAOA,EAAM,MAAM,EAAGF,CAAS,EAE/C,KAAK,SAAS,UAAUE,EAAM,MAAM,EAEhE,CAAqB,CACrB,EAAmB,CAAE,UAAW,EAAG,CAAE,GAEzB,KAAK,SAAS,QAAQH,EAAQ,CAAC,CAAC,GAEhC,KAAK,WAAWA,EAASC,CAAS,CAE9C,CAGI,qBAAqBG,EAAaC,EAAU,CAExC,OAAOD,CACf,CAEI,eAAeE,EAAYC,EAAUC,EAAYC,EAAmBC,EAAU,WACtEC,GAAAC,EAAAN,GAAA,YAAAA,EAAa,oBAAb,YAAAM,EAAgC,OAAhC,YAAAD,EAAsC,QAAS,GAC/CJ,EAAU,UAAU,SAAU,OAAO,EACrCA,EAAU,UAAU,SAAU,QAAQ,EACtCA,EAAU,UAAU,SAAU,SAAS,EAC3BD,EAAY,kBAAkB,KAAK,IAAKO,GACzC,KAAK,oBAAoBA,CAAC,CACpC,EACI,QAAQC,GAAOP,EAAU,OAAOO,CAAG,CAAC,GAClCR,EAAY,OAAS,GAC5BC,EAAU,UAAU,SAAU,OAAO,EACrCA,EAAU,UAAU,SAAU,QAAQ,EACtCA,EAAU,UAAU,SAAU,SAAS,EAC5BD,EAAY,IAAKO,GACjB,KAAK,oBAAoBA,CAAC,CACpC,EAEI,QAAQC,GAAOP,EAAU,OAAOO,CAAG,CAAC,IAEzCN,EAAY,KAAI,EAChBC,EAAmB,KAAI,EAEnC,CACA,CAEA,IAAIX"}